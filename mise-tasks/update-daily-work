#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.13"
# dependencies = []
# ///

import argparse
import json
import re
import subprocess
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any

# Global configuration
NOTES_DIR = Path("/Users/seletz/develop/notes")

# Section headers
SECTION_ISSUES_CREATED = "**Heute erstellte Issues:**"
SECTION_PRS_CREATED = "**Heute erstellte PRs:**"
SECTION_ISSUES_CLOSED = "**Heute geschlossene Issues:**"
SECTION_ISSUES_WORKED = "**Heute bearbeitet:**"
SECTION_PRS_MERGED = "**Heute gemergte PRs:**"


def run_gh_command(cmd: List[str]) -> List[Dict[str, Any]]:
    """Run gh command and return JSON result"""
    try:
        result = subprocess.run(cmd, capture_output=True, text=True, check=True)
        return json.loads(result.stdout) if result.stdout.strip() else []
    except (subprocess.CalledProcessError, json.JSONDecodeError) as e:
        print(f"Error running gh command {' '.join(cmd)}: {e}", file=sys.stderr)
        return []


def get_date_range(period: str) -> str:
    """Get date range string for GitHub search based on period"""
    today = datetime.now()
    
    if period == "today":
        return today.strftime("%Y-%m-%d")
    elif period == "this-week":
        # TODO: Implement week range
        return today.strftime("%Y-%m-%d")
    elif period == "this-month":  
        # TODO: Implement month range
        return today.strftime("%Y-%m-%d")
    elif period == "this-quarter":
        # TODO: Implement quarter range
        return today.strftime("%Y-%m-%d")
    else:
        return today.strftime("%Y-%m-%d")


def fetch_issues_created(period: str = "today") -> List[Dict[str, Any]]:
    """Fetch issues created by user in given period"""
    date_range = get_date_range(period)
    orgs = ["digitalgedacht", "nexiles"]
    all_issues = []
    
    for org in orgs:
        search_query = f"author:@me org:{org} created:{date_range}"
        cmd = ["gh", "issue", "list", "--search", search_query, 
               "--json", "number,title,url"]
        issues = run_gh_command(cmd)
        all_issues.extend(issues)
    
    # Also check personal repos
    search_query = f"author:@me user:seletz created:{date_range}"
    cmd = ["gh", "issue", "list", "--search", search_query, 
           "--json", "number,title,url"]
    issues = run_gh_command(cmd)
    all_issues.extend(issues)
    
    return all_issues


def fetch_prs_created(period: str = "today") -> List[Dict[str, Any]]:
    """Fetch PRs created by user (authored and assigned) in given period"""
    date_range = get_date_range(period)
    orgs = ["digitalgedacht", "nexiles"]
    all_prs = []
    
    for org in orgs:
        search_query = f"author:@me assignee:@me org:{org} created:{date_range}"
        cmd = ["gh", "pr", "list", "--search", search_query,
               "--json", "number,title,url,state,createdAt,mergedAt"]
        prs = run_gh_command(cmd)
        all_prs.extend(prs)
    
    return all_prs


def fetch_issues_worked_on(period: str = "today") -> List[Dict[str, Any]]:
    """Fetch issues user worked on (involved with) in given period"""
    date_range = get_date_range(period)
    orgs = ["digitalgedacht", "nexiles"]
    all_issues = []
    
    for org in orgs:
        search_query = f"involves:@me org:{org} updated:{date_range}"
        cmd = ["gh", "issue", "list", "--search", search_query,
               "--json", "number,title,url,state"]
        issues = run_gh_command(cmd)
        all_issues.extend(issues)
    
    return all_issues


def fetch_issues_closed(period: str = "today") -> List[Dict[str, Any]]:
    """Fetch issues closed in given period (created by or assigned to user)"""
    date_range = get_date_range(period)
    orgs = ["digitalgedacht", "nexiles"] 
    all_issues = []
    
    for org in orgs:
        search_query = f"org:{org} closed:{date_range}"
        cmd = ["gh", "issue", "list", "--search", search_query,
               "--json", "number,title,url,state,assignees,author"]
        issues = run_gh_command(cmd)
        
        # Filter for issues created by or assigned to user
        filtered_issues = []
        for issue in issues:
            is_author = issue.get("author", {}).get("login") == "seletz"
            is_assignee = any(assignee.get("login") == "seletz" 
                            for assignee in issue.get("assignees", []))
            if is_author or is_assignee:
                filtered_issues.append(issue)
        
        all_issues.extend(filtered_issues)
    
    return all_issues


def fetch_prs_merged(period: str = "today") -> List[Dict[str, Any]]:
    """Fetch PRs merged in given period (authored and assigned to user)"""
    date_range = get_date_range(period)
    orgs = ["digitalgedacht", "nexiles"]
    all_prs = []
    
    for org in orgs:
        search_query = f"author:@me assignee:@me org:{org} merged:{date_range}"
        cmd = ["gh", "pr", "list", "--search", search_query,
               "--json", "number,title,url,state,createdAt,mergedAt"]
        prs = run_gh_command(cmd)
        all_prs.extend(prs)
    
    return all_prs


def format_issue_ref(issue: Dict[str, Any]) -> str:
    """Format issue as markdown link"""
    return f"[Issue #{issue['number']}]({issue['url']}) -- {issue['title']}"


def format_pr_ref(pr: Dict[str, Any]) -> str:
    """Format PR as markdown link with timestamps"""
    created_at = datetime.fromisoformat(pr['createdAt'].replace('Z', '+00:00'))
    created_str = created_at.strftime("%Y-%m-%d %H:%M")
    
    result = f"[PR #{pr['number']}]({pr['url']}) -- {pr['title']}"
    
    if pr.get('mergedAt'):
        merged_at = datetime.fromisoformat(pr['mergedAt'].replace('Z', '+00:00'))
        merged_str = merged_at.strftime("%Y-%m-%d %H:%M")
        result += f" (opened {created_str}, merged {merged_str})"
    else:
        result += f" (opened {created_str})"
    
    return result


def get_default_daily_note() -> Path:
    """Get path to today's daily note"""
    today = datetime.now().strftime("%Y-%m-%d")
    return NOTES_DIR / "daily" / f"{today}.md"


def update_daily_review_section(content: str, github_data: Dict[str, List]) -> str:
    """Update the Daily Review section with GitHub activity"""
    
    # Format the new Daily Review content
    review_content = "## Daily Review\n\n"
    
    # Issues created today
    review_content += f"{SECTION_ISSUES_CREATED}\n"
    if github_data["issues_created"]:
        for issue in github_data["issues_created"]:
            review_content += f"- {format_issue_ref(issue)}\n"
    else:
        review_content += "NONE\n"
    review_content += "\n"
    
    # PRs created today  
    review_content += f"{SECTION_PRS_CREATED}\n"
    if github_data["prs_created"]:
        for pr in github_data["prs_created"]:
            review_content += f"- {format_pr_ref(pr)}\n"
    else:
        review_content += "NONE\n"
    review_content += "\n"
    
    # Issues closed today
    review_content += f"{SECTION_ISSUES_CLOSED}\n"
    if github_data["issues_closed"]:
        for issue in github_data["issues_closed"]:
            review_content += f"- {format_issue_ref(issue)}\n"
    else:
        review_content += "NONE\n"
    review_content += "\n"
    
    # Issues worked on today
    review_content += f"{SECTION_ISSUES_WORKED}\n"
    if github_data["issues_worked_on"]:
        for issue in github_data["issues_worked_on"]:
            review_content += f"- {format_issue_ref(issue)} ({issue['state']})\n"
    else:
        review_content += "NONE\n"
    review_content += "\n"
    
    # PRs merged today
    review_content += f"{SECTION_PRS_MERGED}\n"
    if github_data["prs_merged"]:
        for pr in github_data["prs_merged"]:
            review_content += f"- {format_pr_ref(pr)}\n"
    else:
        review_content += "NONE\n"
    
    # Replace the Daily Review section
    pattern = r'(## Daily Review\n\n)(.*?)(?=\n###|\n## |$)'
    if re.search(pattern, content, re.DOTALL):
        return re.sub(pattern, review_content, content, flags=re.DOTALL)
    else:
        # If section doesn't exist, append it
        return content + "\n\n" + review_content


def format_github_refs(content: str) -> str:
    """Format unformatted GitHub references using existing format-github-refs script"""
    daily_note_path = get_default_daily_note()
    
    try:
        # Write content to file temporarily for processing
        daily_note_path.write_text(content, encoding="utf-8")
        
        # Run the format-github-refs script
        result = subprocess.run(
            ["./mise-tasks/format-github-refs", str(daily_note_path)],
            capture_output=True, text=True, cwd="/Users/seletz/develop/tasks"
        )
        
        if result.returncode == 0:
            return daily_note_path.read_text(encoding="utf-8")
        else:
            print(f"Warning: format-github-refs failed: {result.stderr}", file=sys.stderr)
            return content
            
    except Exception as e:
        print(f"Warning: Could not format GitHub refs: {e}", file=sys.stderr)
        return content


def main() -> None:
    parser = argparse.ArgumentParser(description="Update daily journal with GitHub activity")
    parser.add_argument("--period", choices=["today", "this-week", "this-month", "this-quarter"], 
                       default="today", help="Time period to fetch activity for")
    parser.add_argument("--dry-run", action="store_true", help="Show what would be updated without modifying files")
    
    args = parser.parse_args()
    
    daily_note_path = get_default_daily_note()
    
    if not daily_note_path.exists():
        print(f"Error: Daily note {daily_note_path} does not exist", file=sys.stderr)
        sys.exit(1)
    
    print(f"Updating daily note: {daily_note_path}")
    print(f"Period: {args.period}")
    
    # Fetch GitHub activity
    print("Fetching GitHub activity...")
    github_data = {
        "issues_created": fetch_issues_created(args.period),
        "prs_created": fetch_prs_created(args.period),
        "issues_worked_on": fetch_issues_worked_on(args.period),
        "issues_closed": fetch_issues_closed(args.period),
        "prs_merged": fetch_prs_merged(args.period)
    }
    
    # Read current content
    try:
        content = daily_note_path.read_text(encoding="utf-8")
    except Exception as e:
        print(f"Error reading daily note: {e}", file=sys.stderr)
        sys.exit(1)
    
    # Update Daily Review section
    print("Updating Daily Review section...")
    updated_content = update_daily_review_section(content, github_data)
    
    # Format GitHub references
    print("Formatting GitHub references...")
    final_content = format_github_refs(updated_content)
    
    if args.dry_run:
        print("=== DRY RUN - Would update daily note with: ===")
        # Show just the Daily Review section
        match = re.search(r'(## Daily Review.*?)(?=\n###|\n## |$)', final_content, re.DOTALL)
        if match:
            print(match.group(1))
        print("=== END DRY RUN ===")
        return
    
    # Write updated content back
    try:
        daily_note_path.write_text(final_content, encoding="utf-8")
        print(f"Successfully updated {daily_note_path}")
    except Exception as e:
        print(f"Error writing daily note: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
