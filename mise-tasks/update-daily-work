#!/usr/bin/env python

import argparse
import subprocess
import sys
from datetime import datetime

import journal_lib.github as gh


def format_github_refs_with_script(content: str, daily_note_path) -> str:
    """Format unformatted GitHub references using existing format-github-refs script."""
    try:
        # Write content to file temporarily for processing
        daily_note_path.write_text(content, encoding="utf-8")
        
        # Run the format-github-refs script
        result = subprocess.run(
            ["./mise-tasks/format-github-refs", str(daily_note_path)],
            capture_output=True, text=True, cwd="/Users/seletz/develop/tasks"
        )
        
        if result.returncode == 0:
            return daily_note_path.read_text(encoding="utf-8")
        else:
            print(f"Warning: format-github-refs failed: {result.stderr}", file=sys.stderr)
            return content
            
    except Exception as e:
        print(f"Warning: Could not format GitHub refs: {e}", file=sys.stderr)
        return content


def main() -> None:
    parser = argparse.ArgumentParser(description="Update daily journal with GitHub activity")
    parser.add_argument("date", nargs="?", help="Specific date (YYYY-MM-DD) or daily note to update (defaults to today)")
    parser.add_argument("--period", choices=["today", "this-week", "this-month", "this-quarter"], 
                       default="today", help="Time period to fetch activity for (overridden by date argument)")
    parser.add_argument("--dry-run", action="store_true", help="Show what would be updated without modifying files")
    
    args = parser.parse_args()
    
    # Determine the date and period
    if args.date:
        # If date argument provided, use it for both the daily note and GitHub search
        try:
            datetime.strptime(args.date, "%Y-%m-%d")
            target_date = args.date
            period = args.date  # Use specific date for GitHub search
        except ValueError:
            print(f"Error: Date must be in YYYY-MM-DD format, got: {args.date}", file=sys.stderr)
            sys.exit(1)
    else:
        # No date argument, use today and the specified period
        target_date = datetime.now().strftime("%Y-%m-%d")
        period = args.period
    
    daily_note_path = gh.get_default_daily_note(target_date)
    
    if not daily_note_path.exists():
        print(f"Error: Daily note {daily_note_path} does not exist", file=sys.stderr)
        sys.exit(1)
    
    print(f"Updating daily note: {daily_note_path}")
    print(f"Period: {period}")
    
    # Fetch GitHub activity using library functions
    print("Fetching GitHub activity...")
    github_data = {
        "issues_created": gh.fetch_issues_created(period),
        "prs_created": gh.fetch_prs_created(period),
        "issues_worked_on": gh.fetch_issues_worked_on(period),
        "issues_closed": gh.fetch_issues_closed(period),
        "prs_merged": gh.fetch_prs_merged(period)
    }
    
    # Read current content
    try:
        content = daily_note_path.read_text(encoding="utf-8")
    except Exception as e:
        print(f"Error reading daily note: {e}", file=sys.stderr)
        sys.exit(1)
    
    # Update Daily Review section using library
    print("Updating Daily Review section...")
    updated_content = gh.update_daily_review_section(content, github_data)
    
    # Format GitHub references using library
    print("Formatting GitHub references...")
    final_content = gh.format_all_github_refs(updated_content)
    
    if args.dry_run:
        print("=== DRY RUN - Would update daily note with: ===")
        # Show just the Daily Review section
        import re
        match = re.search(r'(## Daily Review.*?)(?=\n###|\n## |$)', final_content, re.DOTALL)
        if match:
            print(match.group(1))
        print("=== END DRY RUN ===")
        return
    
    # Write updated content back
    try:
        daily_note_path.write_text(final_content, encoding="utf-8")
        print(f"Successfully updated {daily_note_path}")
    except Exception as e:
        print(f"Error writing daily note: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()