#!/usr/bin/env python

import argparse
import sys
from pathlib import Path

import journal_lib.github as gh


def main() -> None:
    parser = argparse.ArgumentParser(description="Format unformatted GitHub references in markdown files")
    parser.add_argument("file", nargs="?", help="Markdown file to process (default: today's daily note)")
    parser.add_argument("--repo", help="GitHub repository (org/repo), auto-detected if not specified")
    parser.add_argument("--dry-run", action="store_true", help="Show what would be changed without modifying files")
    
    args = parser.parse_args()
    
    # Use today's daily note if no file specified
    if args.file:
        file_path = Path(args.file)
    else:
        file_path = gh.get_default_daily_note()
        print(f"No file specified, using today's daily note: {file_path}")
    
    if not file_path.exists():
        print(f"Error: File {file_path} does not exist", file=sys.stderr)
        sys.exit(1)
    
    # Read file content
    try:
        content = file_path.read_text(encoding="utf-8")
    except Exception as e:
        print(f"Error reading file: {e}", file=sys.stderr)
        sys.exit(1)
    
    # Format references using library
    updated_content = gh.format_all_github_refs(content, args.repo, args.dry_run)
    
    if args.dry_run:
        print(f"Dry run completed for {file_path}")
        return
    
    # Write back if content changed
    if updated_content != content:
        try:
            file_path.write_text(updated_content, encoding="utf-8")
            print(f"Updated {file_path}")
        except Exception as e:
            print(f"Error writing file: {e}", file=sys.stderr)
            sys.exit(1)
    else:
        print(f"No changes needed for {file_path}")


if __name__ == "__main__":
    main()